// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/device/device.proto

package device

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Devices service

type DevicesService interface {
	// 获取设备列表
	List(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 获取单条设备信息
	Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 创建或更新商品设备信息
	Create(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 更新数据
	Update(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 删除商品设备信息
	Delete(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type devicesService struct {
	c    client.Client
	name string
}

func NewDevicesService(name string, c client.Client) DevicesService {
	return &devicesService{
		c:    c,
		name: name,
	}
}

func (c *devicesService) List(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Devices.List", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesService) Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Devices.Get", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesService) Create(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Devices.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesService) Update(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Devices.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesService) Delete(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Devices.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Devices service

type DevicesHandler interface {
	// 获取设备列表
	List(context.Context, *Request, *Response) error
	// 获取单条设备信息
	Get(context.Context, *Request, *Response) error
	// 创建或更新商品设备信息
	Create(context.Context, *Request, *Response) error
	// 更新数据
	Update(context.Context, *Request, *Response) error
	// 删除商品设备信息
	Delete(context.Context, *Request, *Response) error
}

func RegisterDevicesHandler(s server.Server, hdlr DevicesHandler, opts ...server.HandlerOption) error {
	type devices interface {
		List(ctx context.Context, in *Request, out *Response) error
		Get(ctx context.Context, in *Request, out *Response) error
		Create(ctx context.Context, in *Request, out *Response) error
		Update(ctx context.Context, in *Request, out *Response) error
		Delete(ctx context.Context, in *Request, out *Response) error
	}
	type Devices struct {
		devices
	}
	h := &devicesHandler{hdlr}
	return s.Handle(s.NewHandler(&Devices{h}, opts...))
}

type devicesHandler struct {
	DevicesHandler
}

func (h *devicesHandler) List(ctx context.Context, in *Request, out *Response) error {
	return h.DevicesHandler.List(ctx, in, out)
}

func (h *devicesHandler) Get(ctx context.Context, in *Request, out *Response) error {
	return h.DevicesHandler.Get(ctx, in, out)
}

func (h *devicesHandler) Create(ctx context.Context, in *Request, out *Response) error {
	return h.DevicesHandler.Create(ctx, in, out)
}

func (h *devicesHandler) Update(ctx context.Context, in *Request, out *Response) error {
	return h.DevicesHandler.Update(ctx, in, out)
}

func (h *devicesHandler) Delete(ctx context.Context, in *Request, out *Response) error {
	return h.DevicesHandler.Delete(ctx, in, out)
}
